install.packages("RMySQL")
library(RMySQL)
ucscDb = dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
result = dbGetQuery(ucscDb,"show databases;"); dbDisconnect(ucscDb)
result
hg19 = dbConnect(MySQL(),user="genome",db="hg19",host="genome-mysql.cse.ucsc.edu")
allTables=dbListTables(hg19)
length(allTables)
allTables[1:5]
dbListFields(hg19,"affyU133Plus2")
dbGetQuery(hg19,"select count(*) from affyU133Plus2")
affyData = dbReadTable(hg19, "affyU133Plus2")
head(affyData)
install.packages("nlme")
library(nlme)
library(lattice)
xyplot(weight~Time|Diet,BodyWeight)
library(datasets)
data(airquality)
xyplot(Ozone ~ Wind | factor(Month), data = airquality)
qplot(Wind, Ozone, data = airquality)
library(ggplot2)
qplot(Wind, Ozone, data = airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
checkAndLoadPackages = function(packagesList) {
new.packagesList = packagesList[!(packagesList %in% installed.packages()[, "Package"])]
if (length(new.packagesList))
install.packages(new.packagesList, dependencies = TRUE)
sapply(packagesList, require, character.only = TRUE)
}
## List of packages to install and load
packages = c("rpart",
"rpart.plot",
"randomForest",
"caret",
"e1071",
"ROCR",
"caTools",
"tm",
"SnowballC",
"plyr",
"reshape2",
"pROC",
"mboost",
"gbm",
"ggplot2",
"maps",
"ggmap",
"resample",
"wordcloud",
"XLConnect")
## Run the function above to install and load packages
checkAndLoadPackages(packages)
?qunif
qunif(0.75, min = 0, max = 1, lower.tail = TRUE, log.p = FALSE
)
qunif(0.75, min = 0, max = 1)
0.7/0.3
2.333333*2
4.6666666/2
0.7/0.3
1*0.1+2*0.2+3*0.3+4*0.4
(0.75*0.3)/(0.75*0.3+(1-0.52)*(1-0.3))
install.packages("kernlab")
library(kernlab)
data(spam)
set.seed(3435)
trainIndicator =rbinom(4601, size = 1, prob = 0.5)
table(trainIndicator)
trainSpam = spam[trainIndicator == 1, ]
testSpam = spam[trainIndicator == 0, ]
names(trainSpam)
head(trainSpam)
?reformulate
time
rand
setwd("C:/Users/Stefan/Desktop/RepData_PeerAssessment1")
unzip("activity.zip")
activityData = read.csv("activity.csv", header = TRUE, sep =",")
summary(activityData)
str(activityData)
as.Date(activityData$date, format "%Y-%m-%d")
as.POSIXct(activityData$date, format="%Y-%m-%d")
as.Date(activityData$date, format "%Y-%m-%d")
as.Date(activityData$date, format = "%Y-%m-%d")
activityData$date = as.Date(activityData$date, format = "%Y-%m-%d")
class(activityData$date)
str(activityData)
activityData = read.csv("activity.csv", header = TRUE, sep =",")
activityData$interval = sprintf("%04d", activityData$interval)
str(activityData)
tail(activityData)
activityData$time=format(strptime(activityData$interval, format="%H%M"), format = "%H:%M")
str(activityData)
activityData$DateTime <- as.POSIXct(paste(activityData$date, activityData$time), format="%Y-%m-%d %H:%M")
str(activityData)
activityData = read.csv("activity.csv", header = TRUE, sep =",")
activityData$interval = sprintf("%04d", activityData$interval)
activityData$date = as.Date(activityData$date, format = "%Y-%m-%d")
activityData$DateTime <- as.POSIXct(paste(activityData$date, activityData$interval), format="%Y-%m-%d %H%M")
str(activityData)
head(activityData, 20)
setwd("C:/Users/Stefan/Desktop/RepData_PeerAssessment1")
unzip("activity.zip")
activityData = read.csv("activity.csv", header = TRUE, sep =",")
activityData$interval = sprintf("%04d", activityData$interval)
activityData$date = as.Date(activityData$date, format = "%Y-%m-%d")
activityData$datetime <- as.POSIXct(paste(activityData$date, activityData$interval), format="%Y-%m-%d %H%M")
activityData$date = NULL
activityData$interval = NULL
head(activityData, 20)
table(activityData$datetime)
aggregate(activityData$steps, by=list((substr(activityData$datetime,1,10))),sum)
var2 = aggregate(activityData$steps, by=list((substr(activityData$datetime,1,10))),sum)
str(var2)
hist(var2$x)
hist(var2$x, na.rm = TRUE)
hist(var2$x, rm.na = TRUE)
warnings()
var2 = aggregate(activityData$steps, by=list((substr(activityData$datetime,1,10))),sum, na.rm=true)
var2 = aggregate(activityData$steps, by=list((substr(activityData$datetime,1,10))),sum, na.rm=TRUE)
hist(var2$x)
summary(var2)
var2 = aggregate(activityData$steps, by=list((substr(activityData$datetime,1,10))),sum)
summary(var2)
str(var2)
var2 = aggregate(activityData$steps, by=list((substr(activityData$datetime,1,10))),sum, na.rm=TRUE)
str(var2)
head(var2)
var2 = aggregate(activityData$steps, by=list((substr(activityData$datetime,1,10))),sum, na.action=na.omit)
dataframenoNA = na.omit(activityData)
head(dataframenoNA)
activityDataNoNA = na.omit(activityData)
histogramData = aggregate(activityDatanoNA$steps, by=list((substr(activityDataNoNA$datetime,1,10))),sum)
histogramData = aggregate(activityDataNoNA$steps, by=list((substr(activityDataNoNA$datetime,1,10))),sum)
str(histogramData)
colnames(histogramData) = c("Date", "Steps per day")
str(histogramData)
colnames(histogramData) = c("Date", "Steps_per_day")
str(histogramData)
hist(histogramData$Steps_per_day)
hist(histogramData$Steps_per_day, main = "Histogram of total daily steps", xlab = "Daily steps")
# Omit all the NAs from the dataframe as per the question
activityDataNoNA = na.omit(activityData)
# Sum up the number of steps per day
histogramData = aggregate(activityDataNoNA$steps, by=list((substr(activityDataNoNA$datetime,1,10))),sum)
colnames(histogramData) = c("date", "dailySteps")
# Create Histogram of the steps per day
hist(histogramData$dailySteps, main = "Histogram of total daily steps", xlab = "Daily steps")
var3 = aggregate(activityDataNoNA$steps, by=list((substr(activityDataNoNA$datetime,12,16))),mean)
str(var3)
plot(var3$x,var3$Group.1)
plot(var3$x)
plot(var3$x, type = "l")
plot(var3$x, type = "l", main = "Time series of average daily activity pattern")
plot(var3$x, type = "l", main = "Time series of average daily activity pattern", xlab = "Time of day", ylab = "Average steps")
z <- strptime(var3$Group.1, "%H:$M")
plot(var3$x,z, type = "l", main = "Time series of average daily activity pattern", xlab = "Time of day", ylab = "Average steps")
plot(z~var3$x, type = "l", main = "Time series of average daily activity pattern", xlab = "Time of day", ylab = "Average steps")
plot(z, var3$x, type = "l", main = "Time series of average daily activity pattern", xlab = "Time of day", ylab = "Average steps")
class z
class(z)
z
class(var3$Group.1)
z = as.POSIXct(var3$Group.1,format="%H:$M")
class(z)
z
var3$Group.1
plot(as.Date(var3$Group.1),var3$x, type = "l", main = "Time series of average daily activity pattern", xlab = "Time of day", ylab = "Average steps")
plot(as.Time(var3$Group.1),var3$x, type = "l", main = "Time series of average daily activity pattern", xlab = "Time of day", ylab = "Average steps")
strptime(var3$Group.1, "%H:%M")
z=strptime(var3$Group.1, "%H:%M")
plot(z,var3$x, type = "l", main = "Time series of average daily activity pattern", xlab = "Time of day", ylab = "Average steps")
# Calculate the average number of steps for each time interval over all the days that has data
averageDailyData = aggregate(activityDataNoNA$steps, by=list((substr(activityDataNoNA$datetime,12,16))),mean)
colnames(averageDailyData) = c("time", "averageDailySteps")
# Create a proper time variable out of the time character variable
averageDailyData$time=strptime(averageDailyData$time, "%H:%M")
# Create the plot
plot(averageDailyData$time,averageDailyData$averageDailySteps, type = "l", main = "Time series of average daily activity pattern", xlab = "Time of day", ylab = "Average steps")
which.max(averageDailyData$averageDailySteps)
averageDailyData$time[which.max(averageDailyData$averageDailySteps)]
maxActivityInterval = averageDailyData$time[which.max(averageDailyData$averageDailySteps)]
var4= as.character(maxActivityInterval)
class(var4)
var4
substr(var4, 12, 16)
# Calculate the average number of steps for each time interval over all the days that has data
averageDailyData = aggregate(activityDataNoNA$steps, by=list((substr(activityDataNoNA$datetime,12,16))),mean)
colnames(averageDailyData) = c("time", "averageDailySteps")
# Create a proper time variable out of the time character variable
averageDailyData$time=strptime(averageDailyData$time, "%H:%M")
# Create the plot
plot(averageDailyData$time,averageDailyData$averageDailySteps, type = "l", main = "Time series of average daily activity pattern", xlab = "Time of day", ylab = "Average steps")
# Calculate the 5 minute interval with the maximum average number of steps
maxActivityInterval = as.character(averageDailyData$time[which.max(averageDailyData$averageDailySteps)])
maxActivityInterval = substr(maxActivityInterval, 12, 16)
maxActivityInterval
activityData = read.csv("activity.csv", header = TRUE, sep =",")
# add zeros where necessary in front of the interval time variable
activityData$interval = sprintf("%04d", activityData$interval)
# covert date from factor to date class
activityData$date = as.Date(activityData$date, format = "%Y-%m-%d")
# create a combined variable of the date and time
activityData$datetime <- as.POSIXct(paste(activityData$date, activityData$interval), format="%Y-%m-%d %H%M")
# clean up unnecessary variables
activityData$date = NULL
activityData$interval = NULL
summary(activityData)
str(activityData)
sum(is.na(activityData$steps))
length(activityData$steps)
length(activityData)
length(activityData$steps)
activityData = read.csv("activity.csv", header = TRUE, sep =",")
# add zeros where necessary in front of the interval time variable
activityData$interval = sprintf("%04d", activityData$interval)
# covert date from factor to date class
activityData$date = as.Date(activityData$date, format = "%Y-%m-%d")
# create a combined variable of the date and time
activityData$datetime <- as.POSIXct(paste(activityData$date, activityData$interval), format="%Y-%m-%d %H%M")
# clean up unnecessary variables
activityData$date = NULL
activityData$interval = NULL
# Reduce sensitivty for engineering notation output
options(scipen=5)
# Omit all the NAs from the dataframe as per the question
activityDataNoNA = na.omit(activityData)
# Calculate the average number of steps for each time interval over all the days that has data
averageDailyData = aggregate(activityDataNoNA$steps, by=list((substr(activityDataNoNA$datetime,12,16))),mean)
colnames(averageDailyData) = c("time", "averageDailySteps")
# Create a proper time variable out of the time character variable
averageDailyData$time=strptime(averageDailyData$time, "%H:%M")
str(activityData)
str(averageDailyData)
averageDailyData$interval = substr(as.character(averageDailyData$time),12,16)
str(averageDailyData)
activityData$interval = substr(as.character(activityData$datetime),12,16)
str(averageDailyData)
is.na(averageDailyData$averageDailySteps[1]
)
averageDailyData$averageDailySteps[1]
is.na(activityData$steps[1])
activityData$steps[1]
for (i in 1:nrow(activityData)) {
if is.na(activityData$steps[i]) {
for (j in 1:nrow(averageDailyData)) {
if (activityData$interval[i] == averageDailyData$interval[j]) {
activityData$steps[i] = averageDailyData$averageDailySteps[j]
}
}
}
}
for (i in 1:nrow(activityData)) {
if (is.na(activityData$steps[i])) {
for (j in 1:nrow(averageDailyData)) {
if (activityData$interval[i] == averageDailyData$interval[j]) {
activityData$steps[i] = averageDailyData$averageDailySteps[j]
}
}
}
}
head(activityData)
activityData = read.csv("activity.csv", header = TRUE, sep =",")
# add zeros where necessary in front of the interval time variable
activityData$interval = sprintf("%04d", activityData$interval)
# covert date from factor to date class
activityData$date = as.Date(activityData$date, format = "%Y-%m-%d")
# create a combined variable of the date and time
activityData$datetime <- as.POSIXct(paste(activityData$date, activityData$interval), format="%Y-%m-%d %H%M")
# clean up unnecessary variables
activityData$date = NULL
activityData$interval = NULL
options(scipen=5)
# Omit all the NAs from the dataframe as per the question
activityDataNoNA = na.omit(activityData)
# Calculate the average number of steps for each time interval over all the days that has data
averageDailyData = aggregate(activityDataNoNA$steps, by=list((substr(activityDataNoNA$datetime,12,16))),mean)
colnames(averageDailyData) = c("time", "averageDailySteps")
# Create a proper time variable out of the time character variable
averageDailyData$time=strptime(averageDailyData$time, "%H:%M")
# Create two character interval variables (one for the original dataset with NAs and one for average daily activity dataset) of the time of day interval
averageDailyData$interval = substr(as.character(averageDailyData$time),12,16)
activityData$interval = substr(as.character(activityData$datetime),12,16)
# Search for NAs in the original dataset, and replace with the average value of the same interval value in the average daily activity dataset
for (i in 1:nrow(activityData)) {
if (is.na(activityData$steps[i])) {
for (j in 1:nrow(averageDailyData)) {
if (activityData$interval[i] == averageDailyData$interval[j]) {
activityData$steps[i] = round(averageDailyData$averageDailySteps[j],0)
}
}
}
}
head(activityData)
str(activityData)
summary(activityData)
activityData = read.csv("activity.csv", header = TRUE, sep =",")
# add zeros where necessary in front of the interval time variable
activityData$interval = sprintf("%04d", activityData$interval)
# covert date from factor to date class
activityData$date = as.Date(activityData$date, format = "%Y-%m-%d")
# create a combined variable of the date and time
activityData$datetime <- as.POSIXct(paste(activityData$date, activityData$interval), format="%Y-%m-%d %H%M")
# clean up unnecessary variables
activityData$date = NULL
activityData$interval = NULL
options(scipen=5)
# Omit all the NAs from the dataframe as per the question
activityDataNoNA = na.omit(activityData)
averageDailyData = aggregate(activityDataNoNA$steps, by=list((substr(activityDataNoNA$datetime,12,16))),mean)
colnames(averageDailyData) = c("time", "averageDailySteps")
# Create a proper time variable out of the time character variable
averageDailyData$time=strptime(averageDailyData$time, "%H:%M")
averageDailyData$interval = substr(as.character(averageDailyData$time),12,16)
activityData$interval = substr(as.character(activityData$datetime),12,16)
# Create a new dataset as was asked by the question
activityDataNew = activityData
# Search for NAs in the original dataset, and replace with the average value of the same interval value in the average daily activity dataset
for (i in 1:nrow(activityDataNew)) {
if (is.na(activityDataNew$steps[i])) {
for (j in 1:nrow(averageDailyData)) {
if (activityDataNew$interval[i] == averageDailyData$interval[j]) {
activityDataNew$steps[i] = round(averageDailyData$averageDailySteps[j],0)
}
}
}
}
summary(activityDataNew)
str(activityDataNew)
activityDataNew$weekdays = weekdays(activityDataNew$datetime)
head(activityDataNew)
tail(activityDataNew)
str(activityDataNew)
activityDataNew$weekdays = weekdays(activityDataNew$datetime)
for (i in 1:nrow(activityDataNew)) {
if (activityDataNew$weekdays == "Saturday" | activityDataNew$weekdays == "Sunday") {
activityDataNew$weekdaysFactor = "weekend"
} else {
activityDataNew$weekdaysFactor = "weekday"
}
}
tail(activityDataNew)
head(activityDataNew)
tail(activityDataNew, 50)
activityDataNew
activityDataNew$weekdays = weekdays(activityDataNew$datetime)
for (i in 1:nrow(activityDataNew)) {
if (activityDataNew$weekdays == "Saturday" | activityDataNew$weekdays == "Sunday") {
activityDataNew$weekdaysFactor = "weekend"
} else {
activityDataNew$weekdaysFactor = "weekday"
}
}
warnings()
activityDataNew$weekdays = weekdays(activityDataNew$datetime)
for (i in 1:nrow(activityDataNew)) {
if (activityDataNew$weekdays[i] == "Saturday" | activityDataNew$weekdays[i] == "Sunday") {
activityDataNew$weekdaysFactor[i] = "weekend"
} else {
activityDataNew$weekdaysFactor[i] = "weekday"
}
}
activityDataNew$weekdaysFactor = as.factor(activityDataNew$weekdaysFactor)
str(activityDataNew)
library(lattice)
averageDailyDataNew = aggregate(activityDataNew$steps, by=list((substr(activityDataNew$datetime,12,16))),mean)
str(averageDailyDataNew)
averageDailyDataNew = aggregate(activityDataNew$steps, by=list((substr(activityDataNew$datetime,12,16)), activityDataNew$weekdaysFactor),mean)
str(averageDailyDataNew)
activityDataNew$weekdaysFactor
averageDailyDataNew
colnames(averageDailyDataNew) = c("time","typeofday", "averageDailySteps")
averageDailyDataNew
averageDailyData$time=strptime(averageDailyData$time, "%H:%M")
activityData = read.csv("activity.csv", header = TRUE, sep =",")
# add zeros where necessary in front of the interval time variable
activityData$interval = sprintf("%04d", activityData$interval)
# covert date from factor to date class
activityData$date = as.Date(activityData$date, format = "%Y-%m-%d")
# create a combined variable of the date and time
activityData$datetime <- as.POSIXct(paste(activityData$date, activityData$interval), format="%Y-%m-%d %H%M")
# clean up unnecessary variables
activityData$date = NULL
activityData$interval = NULL
# Reduce sensitivty for engineering notation output
options(scipen=5)
# Omit all the NAs from the dataframe as per the question
activityDataNoNA = na.omit(activityData)
# Calculate the average number of steps for each time interval over all the days that has data
averageDailyData = aggregate(activityDataNoNA$steps, by=list((substr(activityDataNoNA$datetime,12,16))),mean)
colnames(averageDailyData) = c("time", "averageDailySteps")
# Create a proper time variable out of the time character variable
averageDailyData$time=strptime(averageDailyData$time, "%H:%M")
# Create two character interval variables (one for the original dataset with NAs and one for average daily activity dataset) of the time of day interval
averageDailyData$interval = substr(as.character(averageDailyData$time),12,16)
activityData$interval = substr(as.character(activityData$datetime),12,16)
# Create a new dataset as was asked by the question
activityDataNew = activityData
# Search for NAs in the original dataset, and replace with the average value of the same interval value in the average daily activity dataset
for (i in 1:nrow(activityDataNew)) {
if (is.na(activityDataNew$steps[i])) {
for (j in 1:nrow(averageDailyData)) {
if (activityDataNew$interval[i] == averageDailyData$interval[j]) {
activityDataNew$steps[i] = round(averageDailyData$averageDailySteps[j],0)
}
}
}
}
# Add a variable with the name of the day
activityDataNew$weekdays = weekdays(activityDataNew$datetime)
# Use this variable to create a factor variable of weekend/weekday
for (i in 1:nrow(activityDataNew)) {
if (activityDataNew$weekdays[i] == "Saturday" | activityDataNew$weekdays[i] == "Sunday") {
activityDataNew$weekdaysFactor[i] = "weekend"
} else {
activityDataNew$weekdaysFactor[i] = "weekday"
}
}
activityDataNew$weekdaysFactor = as.factor(activityDataNew$weekdaysFactor)
library(lattice)
# Calculate the average number of steps for each time interval over all the days that has data
averageDailyDataNew = aggregate(activityDataNew$steps, by=list((substr(activityDataNew$datetime,12,16))activityDataNew$weekdaysFactor),mean)
colnames(averageDailyDataNew) = c("time","typeofday", "averageDailySteps")
# Create a proper time variable out of the time character variable
averageDailyDataNew$time=strptime(averageDailyDataNew$time, "%H:%M")
# Calculate the average number of steps for each time interval over all the days that has data
averageDailyDataNew = aggregate(activityDataNew$steps, by=list((substr(activityDataNew$datetime,12,16)),activityDataNew$weekdaysFactor),mean)
colnames(averageDailyDataNew) = c("time","typeofday", "averageDailySteps")
# Create a proper time variable out of the time character variable
averageDailyDataNew$time=strptime(averageDailyDataNew$time, "%H:%M")
averageDailyDataNew
xyplot(time~averageDailySteps | factor(typeofday), data=averageDailyDataNew)
xyplot(time~averageDailySteps | factor(typeofday), data=averageDailyDataNew, type="l")
xyplot(averageDailySteps~time | factor(typeofday), data=averageDailyDataNew, type="l")
